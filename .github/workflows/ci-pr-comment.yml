name: CI PR Build Download Comment

on:
  workflow_run:
    workflows: [CI]
    types:
      - completed
    branches-ignore:
      - '_archived__**'
    paths-ignore:
      - '**/README.md'

permissions:
  actions: read
  pull-requests: write

jobs:
  precheck:
    name: Check if workflow needs to execute
    runs-on: ubuntu-latest
    outputs:
      skipCI: ${{ steps.checkciskip.outputs.result }}
    if: github.event.workflow_run.conclusion == 'success' || github.event.workflow_run.event == 'pull_request' || github.event.workflow_run.event == 'pull_request_target'
    steps:
      - name: Check Result
        id: checkciskip
        env:
          COMMIT_API: ${{ github.event.repository.commits_url }}
          GH_GH: ${{ toJson(github) }}
          FROM_CI_EVENT: ${{ github.event.workflow_run.event }}
          PR_HEADBRANCH: ${{ github.event.workflow_run.head_branch }}
          PR_HEADSHA: ${{ github.event.workflow_run.head_sha }}
          PR_HEADMSG: ${{ github.event.workflow_run.head_commit.message }}
          PR_NUM: ${{ github.event.workflow_run.pull_requests[0].number }}
          PR_RUNID: ${{ github.event.workflow_run.id }}
          PR_CHECKID: ${{ github.event.workflow_run.check_suite_id }}
        run: |
          echo "PR Run ID                        : $PR_RUNID"
          echo "From CI Event                    : $FROM_CI_EVENT"
          echo "PR Number                        : $PR_NUM"
          echo "Head Branch Ref                  : $PR_HEADBRANCH"
          echo "PR Head Commit SHA               : $PR_HEADSHA"
          SKIP_A=$([[ "$PR_HEADBRANCH" == l10n_* ]] && echo true || echo false)
          echo "Skip if branch starts with l10n_ : $SKIP_A"
          echo "Commit Message:"
          echo "$PR_HEADMSG"
          EXP_SKIP="\[ci skip]"
          SKIP_B=$([[ "$PR_HEADMSG" =~ $EXP_SKIP ]] && echo true || echo false)
          echo "Skip via Commit Msg              : $SKIP_B"
          RES=$([[ $SKIP_A == true || $SKIP_B == true ]] && echo true || echo false)
          echo "Skip CI                          : $RES"
          echo "::set-output name=result::$RES"
  upload_coverage:
    name: Coverage Uploads
    runs-on: ubuntu-latest
    needs: precheck
    if: needs.precheck.outputs.skipCI == 'false'
    steps:
      - name: Download coverage artifact
        id: artCov
        uses: actions/github-script@v6
        with:
          script: |
            let runArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            let covArtifact = runArtifacts.data.artifacts.filter((a) => {
              return a.name === 'coverage'
            })[0];
            if (!covArtifact) {
              console.log(`No coverage artifact found in workflow run ${context.payload.workflow_run.id}`);
              return;
            }
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: covArtifact.id,
              archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/coverage.zip', Buffer.from(download.data));
            return true;
      - name: Unzip coverage artifact
        if: steps.artCov.outputs.result == 'true'
        run: unzip coverage.zip -d coverage
      - name: List files
        if: steps.artCov.outputs.result == 'true'
        run: |
          ls -anl
  download_comment:
    name: Generate PR Build Download Comment
    runs-on: ubuntu-latest
    needs: precheck
    if: needs.precheck.outputs.skipCI == 'false'
    steps:
      - name: 'Echo available stuff'
        env:
          GH_GH: ${{ toJson(github) }}
        run: |
          echo "Check env log above for details"
      - name: 'Generate PR Run Info from previous workflow'
        id: workflowArtifacts
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            if (allArtifacts.data.total_count < 2) {
              console.log(`Artifact count is ${allArtifacts.data.total_count}. Not generating comment.`);
              return;
            }
            let buildArtifacts = allArtifacts.data.artifacts.filter((a) => {
              return a.name.indexOf('Cookie-AutoDelete') !== -1 && !a.expired
            }).map((a) => {
              return {
                id: a.id,
                name: a.name,
                created_at: a.created_at,
                expires_at: a.expires_at,
                artifact_url: `${context.payload.workflow_run.head_repository.html_url}/suites/${context.payload.workflow_run.check_suite_id}/artifacts/${a.id}`,
              }
            });
            console.log(buildArtifacts);
            return buildArtifacts;
        
